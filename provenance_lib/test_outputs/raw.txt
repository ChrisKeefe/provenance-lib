raw_seqs = use.init_format('raw_seqs', lambda: None, ext='.fastq.gz')
imported_seqs = use.import_from_format('emp_single_end_sequences', 'EMPSingleEndSequences', raw_seqs)
use.action(use.UsageAction(plugin_id='framework', action_id='import'), use.UsageInputs(None), use.UsageOutputNames({}))
use.action(use.UsageAction(plugin_id='demux', action_id='emp_single'), use.UsageInputs({'seqs': 'a35830e1-4535-47c6-aa23-be295a57ee1c', 'barcodes': MetadataInfo(input_artifact_uuids=[], relative_fp='barcodes.tsv'), 'rev_comp_barcodes': False, 'rev_comp_mapping_barcodes': False}), use.UsageOutputNames({'per_sample_sequences': 'per_sample_sequences'}))
use.action(use.UsageAction(plugin_id='dada2', action_id='denoise_single'), use.UsageInputs({'demultiplexed_seqs': '99fa3670-aa1a-45f6-ba8e-803c976a1163', 'trunc_len': 120, 'trim_left': 0, 'max_ee': 2.0, 'trunc_q': 2, 'chimera_method': 'consensus', 'min_fold_parent_over_abundance': 1.0, 'n_threads': 1, 'n_reads_learn': 1000000, 'hashed_feature_ids': True}), use.UsageOutputNames({'representative_sequences': 'representative_sequences'}))
use.action(use.UsageAction(plugin_id='dada2', action_id='denoise_single'), use.UsageInputs({'demultiplexed_seqs': '99fa3670-aa1a-45f6-ba8e-803c976a1163', 'trunc_len': 120, 'trim_left': 0, 'max_ee': 2.0, 'trunc_q': 2, 'chimera_method': 'consensus', 'min_fold_parent_over_abundance': 1.0, 'n_threads': 1, 'n_reads_learn': 1000000, 'hashed_feature_ids': True}), use.UsageOutputNames({'table': 'table'}))
use.action(use.UsageAction(plugin_id='phylogeny', action_id='align_to_tree_mafft_fasttree'), use.UsageInputs({'sequences': '7ecf8954-e49a-4605-992e-99fcee397935', 'n_threads': 1, 'mask_max_gap_frequency': 1.0, 'mask_min_conservation': 0.4}), use.UsageOutputNames({'rooted_tree': 'rooted_tree'}))
use.action(use.UsageAction(plugin_id='diversity', action_id='core_metrics_phylogenetic'), use.UsageInputs({'table': '89af91c0-033d-4e30-8ac4-f29a3b407dc1', 'phylogeny': 'bce3d09b-e296-4f2b-9af4-834db6412429', 'sampling_depth': 1109, 'metadata': MetadataInfo(input_artifact_uuids=[], relative_fp='metadata.tsv'), 'n_jobs': 1}), use.UsageOutputNames({'unweighted_unifrac_emperor': 'unweighted_unifrac_emperor'}))